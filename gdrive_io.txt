# -*- coding: utf-8 -*-
"""GDrive_IO.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1cQ-4JIrCW_v_xkJPV0onALSeoCmMWrfe
"""

# Functions for reading & writing .txt files in Google Drive
# PyDrive docs: https://gsuitedevs.github.io/PyDrive/docs/build/html/index.htm

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

def WriteNewFile(fn, txt):
  new = drive.CreateFile({'title': fn})
  new.SetContentString(txt)
  new.Upload()
  file_id = new.get('id')
  return file_id

def DriveFileDict():
  file_list = drive.ListFile({'q': "'root' in parents and trashed=false"}).GetList()
  title_ids = {f['title']:f['id'] for f in file_list}
  return title_ids

def GetID(name):
  all = DriveFileDict()
  if name in all:
    id_is = all[name]
  else:
    id_is = None
  return id_is

def OpenFile(id):
  dl = drive.CreateFile({'id': id})
  content = dl.GetContentString()
  return content

def FileContents(fn):
  g = GetID(fn)
  if g == None:
    c = None
  else:
    c = OpenFile(g)
  return c

def DeleteFile(existing_id, trash=True):  
  del_ext = drive.CreateFile({'id': existing_id})
  if trash == False:
    del_ext.Delete()
  else:
    del_ext.Trash()
    
def OverwriteFile(existing_id, new_txt, t=False, r=None):
  if t:  # move existing file to trash & create new file
    DeleteFile(existing_id)
    ow = WriteNewFile(intended_fn, new_txt)
    return ow
  else:  # regular overwrite (original not saved)
    opened = drive.CreateFile({'id': existing_id})
    if r == None:  # overwrite whole file
      opened.SetContentString(new_txt)
    else:  # overwrite specified text
      opened.SetContentString(content.replace(r, new_txt))
    opened.Upload()
    return existing_id
  
def IterateFilename(orig_name, exists=True):
  dr = DriveFileDict()
  base, ext = orig_name.split(".")
  i = 0
  while exists:
    i+=1
    new_name = "{}{}.{}".format(base, i, ext)
    if new_name in dr:
      exists = True
    else:
      exists = False
  return new_name

def NonDupName(name_to_check):
  drive = DriveFileDict()
  if name_to_check in drive:
    good_fn = IterateFilename(name_to_check)
  else:
    good_fn = name_to_check
  return good_fn

def NewOrOverwrite(fn, txt, t=False, r=None):
  ext_id = GetID(fn)
  if ext_id == None:
    new_id = WriteNewFile(fn, txt)
  else:
    new_id = OverwriteFile(ext_id, txt, t, r)  # new_id == ext_id
  return new_id
   
def NewOnly(fn, txt):
  file = NonDupName(fn)
  new_id = WriteNewFile(file, txt)
  return new_id

def Write(filename, text, ow=True, t=False, r=None):
  if ow:
    id = NewOrOverwrite(filename, text, t, r)
  else:
    id = NewOnly(filename, text)
  return id



